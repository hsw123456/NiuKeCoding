package com.niuke.test2;

import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

public class TestGreedy2 {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int maxTime = 0;
		int type = 0;
		Set<Herbal> herbals = new TreeSet();
		if (scanner.hasNextLine()) {
			String line = scanner.nextLine();
			String[] str = line.split(" ");
			try {
				maxTime = Integer.parseInt(str[0]);
				type = Integer.parseInt(str[1]);
			} catch (Exception e) {
				throw new RuntimeException("error");
			}
		}

		for (int i = 0; i < type; i++) {
			if (scanner.hasNextLine()) {
				herbals.add(new Herbal(scanner.nextInt(), scanner.nextInt()));
			}
		}

		for (Herbal h : herbals) {
			System.out.println(h.getKey() + "-->"+ h.getValue());
		}

	}

	static class Herbal implements Comparable<Herbal> {

		private Integer key;
		private Integer value;

		public Integer getKey() {
			return key;
		}

		public void setKey(Integer key) {
			this.key = key;
		}

		public Integer getValue() {
			return value;
		}

		public void setValue(Integer value) {
			this.value = value;
		}

		public Herbal(Integer key, Integer value) {
			super();
			this.key = key;
			this.value = value;
		}

		@Override
		public int compareTo(Herbal o) {
			if (o.value != this.value)
				return o.value - this.value;
			return this.key < o.key ? -1 : 1;
		}

	}

	public static int maxValue(Set<Herbal> h, int maxTime) {
		return 0;
	}
}
